// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.22.0
// source: DanmuRequest.proto

package grpc_server

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 弹幕数据
type CmdDanmuData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId                 int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	OpenId                 string `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Uid                    int32  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname                  string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname,omitempty"`
	Msg                    string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgId                  string `protobuf:"bytes,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	FansMedalLevel         int32  `protobuf:"varint,7,opt,name=fans_medal_level,json=fansMedalLevel,proto3" json:"fans_medal_level,omitempty"`
	FansMedalName          string `protobuf:"bytes,8,opt,name=fans_medal_name,json=fansMedalName,proto3" json:"fans_medal_name,omitempty"`
	FansMedalWearingStatus bool   `protobuf:"varint,9,opt,name=fans_medal_wearing_status,json=fansMedalWearingStatus,proto3" json:"fans_medal_wearing_status,omitempty"`
	GuardLevel             int32  `protobuf:"varint,10,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`
	Timestamp              int32  `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Uface                  string `protobuf:"bytes,12,opt,name=uface,proto3" json:"uface,omitempty"`
	EmojiImgUrl            string `protobuf:"bytes,13,opt,name=emoji_img_url,json=emojiImgUrl,proto3" json:"emoji_img_url,omitempty"`
	DmType                 int32  `protobuf:"varint,14,opt,name=dm_type,json=dmType,proto3" json:"dm_type,omitempty"`
}

func (x *CmdDanmuData) Reset() {
	*x = CmdDanmuData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdDanmuData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdDanmuData) ProtoMessage() {}

func (x *CmdDanmuData) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdDanmuData.ProtoReflect.Descriptor instead.
func (*CmdDanmuData) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{0}
}

func (x *CmdDanmuData) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CmdDanmuData) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CmdDanmuData) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CmdDanmuData) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

func (x *CmdDanmuData) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CmdDanmuData) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *CmdDanmuData) GetFansMedalLevel() int32 {
	if x != nil {
		return x.FansMedalLevel
	}
	return 0
}

func (x *CmdDanmuData) GetFansMedalName() string {
	if x != nil {
		return x.FansMedalName
	}
	return ""
}

func (x *CmdDanmuData) GetFansMedalWearingStatus() bool {
	if x != nil {
		return x.FansMedalWearingStatus
	}
	return false
}

func (x *CmdDanmuData) GetGuardLevel() int32 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

func (x *CmdDanmuData) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CmdDanmuData) GetUface() string {
	if x != nil {
		return x.Uface
	}
	return ""
}

func (x *CmdDanmuData) GetEmojiImgUrl() string {
	if x != nil {
		return x.EmojiImgUrl
	}
	return ""
}

func (x *CmdDanmuData) GetDmType() int32 {
	if x != nil {
		return x.DmType
	}
	return 0
}

// 礼物字段数据
type CmdSendGiftData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId                 int32       `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	OpenId                 string      `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Uid                    int32       `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname                  string      `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname,omitempty"`
	Uface                  string      `protobuf:"bytes,5,opt,name=uface,proto3" json:"uface,omitempty"`
	GiftId                 int32       `protobuf:"varint,6,opt,name=gift_id,json=giftId,proto3" json:"gift_id,omitempty"`
	GiftName               string      `protobuf:"bytes,7,opt,name=gift_name,json=giftName,proto3" json:"gift_name,omitempty"`
	GiftNum                int32       `protobuf:"varint,8,opt,name=gift_num,json=giftNum,proto3" json:"gift_num,omitempty"`
	Price                  int32       `protobuf:"varint,9,opt,name=price,proto3" json:"price,omitempty"`
	Paid                   bool        `protobuf:"varint,10,opt,name=paid,proto3" json:"paid,omitempty"`
	FansMedalLevel         int32       `protobuf:"varint,11,opt,name=fans_medal_level,json=fansMedalLevel,proto3" json:"fans_medal_level,omitempty"`
	FansMedalName          string      `protobuf:"bytes,12,opt,name=fans_medal_name,json=fansMedalName,proto3" json:"fans_medal_name,omitempty"`
	FansMedalWearingStatus bool        `protobuf:"varint,13,opt,name=fans_medal_wearing_status,json=fansMedalWearingStatus,proto3" json:"fans_medal_wearing_status,omitempty"`
	GuardLevel             int32       `protobuf:"varint,14,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`
	Timestamp              int32       `protobuf:"varint,15,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MsgId                  string      `protobuf:"bytes,16,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	GiftIcon               string      `protobuf:"bytes,17,opt,name=gift_icon,json=giftIcon,proto3" json:"gift_icon,omitempty"`
	ComboGift              bool        `protobuf:"varint,18,opt,name=combo_gift,json=comboGift,proto3" json:"combo_gift,omitempty"`
	AnchorInfo             *AnchorInfo `protobuf:"bytes,19,opt,name=anchor_info,json=anchorInfo,proto3" json:"anchor_info,omitempty"`
	ComboInfo              *ComboInfo  `protobuf:"bytes,20,opt,name=combo_info,json=comboInfo,proto3" json:"combo_info,omitempty"`
}

func (x *CmdSendGiftData) Reset() {
	*x = CmdSendGiftData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdSendGiftData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdSendGiftData) ProtoMessage() {}

func (x *CmdSendGiftData) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdSendGiftData.ProtoReflect.Descriptor instead.
func (*CmdSendGiftData) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{1}
}

func (x *CmdSendGiftData) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CmdSendGiftData) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CmdSendGiftData) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CmdSendGiftData) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

func (x *CmdSendGiftData) GetUface() string {
	if x != nil {
		return x.Uface
	}
	return ""
}

func (x *CmdSendGiftData) GetGiftId() int32 {
	if x != nil {
		return x.GiftId
	}
	return 0
}

func (x *CmdSendGiftData) GetGiftName() string {
	if x != nil {
		return x.GiftName
	}
	return ""
}

func (x *CmdSendGiftData) GetGiftNum() int32 {
	if x != nil {
		return x.GiftNum
	}
	return 0
}

func (x *CmdSendGiftData) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CmdSendGiftData) GetPaid() bool {
	if x != nil {
		return x.Paid
	}
	return false
}

func (x *CmdSendGiftData) GetFansMedalLevel() int32 {
	if x != nil {
		return x.FansMedalLevel
	}
	return 0
}

func (x *CmdSendGiftData) GetFansMedalName() string {
	if x != nil {
		return x.FansMedalName
	}
	return ""
}

func (x *CmdSendGiftData) GetFansMedalWearingStatus() bool {
	if x != nil {
		return x.FansMedalWearingStatus
	}
	return false
}

func (x *CmdSendGiftData) GetGuardLevel() int32 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

func (x *CmdSendGiftData) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CmdSendGiftData) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *CmdSendGiftData) GetGiftIcon() string {
	if x != nil {
		return x.GiftIcon
	}
	return ""
}

func (x *CmdSendGiftData) GetComboGift() bool {
	if x != nil {
		return x.ComboGift
	}
	return false
}

func (x *CmdSendGiftData) GetAnchorInfo() *AnchorInfo {
	if x != nil {
		return x.AnchorInfo
	}
	return nil
}

func (x *CmdSendGiftData) GetComboInfo() *ComboInfo {
	if x != nil {
		return x.ComboInfo
	}
	return nil
}

type AnchorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Uid    int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname  string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname,omitempty"`
	Uface  string `protobuf:"bytes,4,opt,name=uface,proto3" json:"uface,omitempty"`
}

func (x *AnchorInfo) Reset() {
	*x = AnchorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorInfo) ProtoMessage() {}

func (x *AnchorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorInfo.ProtoReflect.Descriptor instead.
func (*AnchorInfo) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{2}
}

func (x *AnchorInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *AnchorInfo) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *AnchorInfo) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

func (x *AnchorInfo) GetUface() string {
	if x != nil {
		return x.Uface
	}
	return ""
}

type ComboInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComboBaseNum int32  `protobuf:"varint,1,opt,name=combo_base_num,json=comboBaseNum,proto3" json:"combo_base_num,omitempty"`
	ComboCount   int32  `protobuf:"varint,2,opt,name=combo_count,json=comboCount,proto3" json:"combo_count,omitempty"`
	ComboId      string `protobuf:"bytes,3,opt,name=combo_id,json=comboId,proto3" json:"combo_id,omitempty"`
	ComboTimeout int32  `protobuf:"varint,4,opt,name=combo_timeout,json=comboTimeout,proto3" json:"combo_timeout,omitempty"`
}

func (x *ComboInfo) Reset() {
	*x = ComboInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComboInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComboInfo) ProtoMessage() {}

func (x *ComboInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComboInfo.ProtoReflect.Descriptor instead.
func (*ComboInfo) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{3}
}

func (x *ComboInfo) GetComboBaseNum() int32 {
	if x != nil {
		return x.ComboBaseNum
	}
	return 0
}

func (x *ComboInfo) GetComboCount() int32 {
	if x != nil {
		return x.ComboCount
	}
	return 0
}

func (x *ComboInfo) GetComboId() string {
	if x != nil {
		return x.ComboId
	}
	return ""
}

func (x *ComboInfo) GetComboTimeout() int32 {
	if x != nil {
		return x.ComboTimeout
	}
	return 0
}

// SC数据
type CmdSuperChatData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId                 int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	OpenId                 string `protobuf:"bytes,2,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Uid                    int32  `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname                  string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname,omitempty"`
	Uface                  string `protobuf:"bytes,5,opt,name=uface,proto3" json:"uface,omitempty"`
	MessageId              int32  `protobuf:"varint,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Message                string `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
	MsgId                  string `protobuf:"bytes,8,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Rmb                    int32  `protobuf:"varint,9,opt,name=rmb,proto3" json:"rmb,omitempty"`
	Timestamp              int32  `protobuf:"varint,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StartTime              int32  `protobuf:"varint,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                int32  `protobuf:"varint,12,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	GuardLevel             int32  `protobuf:"varint,13,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`
	FansMedalLevel         int32  `protobuf:"varint,14,opt,name=fans_medal_level,json=fansMedalLevel,proto3" json:"fans_medal_level,omitempty"`
	FansMedalName          string `protobuf:"bytes,15,opt,name=fans_medal_name,json=fansMedalName,proto3" json:"fans_medal_name,omitempty"`
	FansMedalWearingStatus bool   `protobuf:"varint,16,opt,name=fans_medal_wearing_status,json=fansMedalWearingStatus,proto3" json:"fans_medal_wearing_status,omitempty"`
}

func (x *CmdSuperChatData) Reset() {
	*x = CmdSuperChatData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdSuperChatData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdSuperChatData) ProtoMessage() {}

func (x *CmdSuperChatData) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdSuperChatData.ProtoReflect.Descriptor instead.
func (*CmdSuperChatData) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{4}
}

func (x *CmdSuperChatData) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CmdSuperChatData) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *CmdSuperChatData) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *CmdSuperChatData) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

func (x *CmdSuperChatData) GetUface() string {
	if x != nil {
		return x.Uface
	}
	return ""
}

func (x *CmdSuperChatData) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CmdSuperChatData) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CmdSuperChatData) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *CmdSuperChatData) GetRmb() int32 {
	if x != nil {
		return x.Rmb
	}
	return 0
}

func (x *CmdSuperChatData) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CmdSuperChatData) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CmdSuperChatData) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CmdSuperChatData) GetGuardLevel() int32 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

func (x *CmdSuperChatData) GetFansMedalLevel() int32 {
	if x != nil {
		return x.FansMedalLevel
	}
	return 0
}

func (x *CmdSuperChatData) GetFansMedalName() string {
	if x != nil {
		return x.FansMedalName
	}
	return ""
}

func (x *CmdSuperChatData) GetFansMedalWearingStatus() bool {
	if x != nil {
		return x.FansMedalWearingStatus
	}
	return false
}

// SC删除数据
type CmdSuperChatDelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId     int32   `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	MessageIds []int32 `protobuf:"varint,2,rep,packed,name=message_ids,json=messageIds,proto3" json:"message_ids,omitempty"`
	MsgId      string  `protobuf:"bytes,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *CmdSuperChatDelData) Reset() {
	*x = CmdSuperChatDelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdSuperChatDelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdSuperChatDelData) ProtoMessage() {}

func (x *CmdSuperChatDelData) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdSuperChatDelData.ProtoReflect.Descriptor instead.
func (*CmdSuperChatDelData) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{5}
}

func (x *CmdSuperChatDelData) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CmdSuperChatDelData) GetMessageIds() []int32 {
	if x != nil {
		return x.MessageIds
	}
	return nil
}

func (x *CmdSuperChatDelData) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

// 付费大航海数据
type CmdGuardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo               *UserInfo `protobuf:"bytes,1,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	GuardLevel             int32     `protobuf:"varint,2,opt,name=guard_level,json=guardLevel,proto3" json:"guard_level,omitempty"`
	GuardNum               int32     `protobuf:"varint,3,opt,name=guard_num,json=guardNum,proto3" json:"guard_num,omitempty"`
	GuardUnit              string    `protobuf:"bytes,4,opt,name=guard_unit,json=guardUnit,proto3" json:"guard_unit,omitempty"`
	FansMedalLevel         int32     `protobuf:"varint,5,opt,name=fans_medal_level,json=fansMedalLevel,proto3" json:"fans_medal_level,omitempty"`
	FansMedalName          string    `protobuf:"bytes,6,opt,name=fans_medal_name,json=fansMedalName,proto3" json:"fans_medal_name,omitempty"`
	FansMedalWearingStatus bool      `protobuf:"varint,7,opt,name=fans_medal_wearing_status,json=fansMedalWearingStatus,proto3" json:"fans_medal_wearing_status,omitempty"`
	Timestamp              int32     `protobuf:"varint,8,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RoomId                 int32     `protobuf:"varint,9,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	MsgId                  string    `protobuf:"bytes,10,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *CmdGuardData) Reset() {
	*x = CmdGuardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CmdGuardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CmdGuardData) ProtoMessage() {}

func (x *CmdGuardData) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CmdGuardData.ProtoReflect.Descriptor instead.
func (*CmdGuardData) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{6}
}

func (x *CmdGuardData) GetUserInfo() *UserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CmdGuardData) GetGuardLevel() int32 {
	if x != nil {
		return x.GuardLevel
	}
	return 0
}

func (x *CmdGuardData) GetGuardNum() int32 {
	if x != nil {
		return x.GuardNum
	}
	return 0
}

func (x *CmdGuardData) GetGuardUnit() string {
	if x != nil {
		return x.GuardUnit
	}
	return ""
}

func (x *CmdGuardData) GetFansMedalLevel() int32 {
	if x != nil {
		return x.FansMedalLevel
	}
	return 0
}

func (x *CmdGuardData) GetFansMedalName() string {
	if x != nil {
		return x.FansMedalName
	}
	return ""
}

func (x *CmdGuardData) GetFansMedalWearingStatus() bool {
	if x != nil {
		return x.FansMedalWearingStatus
	}
	return false
}

func (x *CmdGuardData) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CmdGuardData) GetRoomId() int32 {
	if x != nil {
		return x.RoomId
	}
	return 0
}

func (x *CmdGuardData) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type UserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpenId string `protobuf:"bytes,1,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty"`
	Uid    int32  `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Uname  string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname,omitempty"`
	Uface  string `protobuf:"bytes,4,opt,name=uface,proto3" json:"uface,omitempty"`
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{7}
}

func (x *UserInfo) GetOpenId() string {
	if x != nil {
		return x.OpenId
	}
	return ""
}

func (x *UserInfo) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfo) GetUname() string {
	if x != nil {
		return x.Uname
	}
	return ""
}

func (x *UserInfo) GetUface() string {
	if x != nil {
		return x.Uface
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCount uint64 `protobuf:"varint,1,opt,name=data_count,json=dataCount,proto3" json:"data_count,omitempty"`
	Status    int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_DanmuRequest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_DanmuRequest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_DanmuRequest_proto_rawDescGZIP(), []int{8}
}

func (x *Response) GetDataCount() uint64 {
	if x != nil {
		return x.DataCount
	}
	return 0
}

func (x *Response) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_DanmuRequest_proto protoreflect.FileDescriptor

var file_DanmuRequest_proto_rawDesc = []byte{
	0x0a, 0x12, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x03, 0x0a, 0x0c, 0x43, 0x6d, 0x64, 0x44, 0x61, 0x6e, 0x6d,
	0x75, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x73,
	0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x6e,
	0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61,
	0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66,
	0x61, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x57, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x66, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x5f, 0x69, 0x6d, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x6d, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x64, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf4, 0x04, 0x0a, 0x0f, 0x43, 0x6d, 0x64, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x66, 0x61, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x66, 0x61, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67,
	0x69, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x69,
	0x66, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x69, 0x66, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d,
	0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x73, 0x4d,
	0x65, 0x64, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x6e, 0x73,
	0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x6e,
	0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x57, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x69, 0x66,
	0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x69,
	0x66, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f,
	0x67, 0x69, 0x66, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x47, 0x69, 0x66, 0x74, 0x12, 0x2c, 0x0a, 0x0b, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63,
	0x0a, 0x0a, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x75, 0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x66,
	0x61, 0x63, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x62, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x42, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x62, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62,
	0x6f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x10, 0x43, 0x6d, 0x64,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x6d, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x6d, 0x62, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x73,
	0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x6e,
	0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61,
	0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66,
	0x61, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x57, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x66, 0x0a, 0x13, 0x43, 0x6d, 0x64, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xee, 0x02,
	0x0a, 0x0c, 0x43, 0x6d, 0x64, 0x47, 0x75, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x26,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x75, 0x61,
	0x72, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x75, 0x61, 0x72, 0x64, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61,
	0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66,
	0x61, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a,
	0x0f, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x6e, 0x73, 0x4d, 0x65, 0x64, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x61, 0x6e, 0x73, 0x5f, 0x6d, 0x65,
	0x64, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x66, 0x61, 0x6e, 0x73, 0x4d, 0x65,
	0x64, 0x61, 0x6c, 0x57, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x61,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65,
	0x6e, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x66, 0x61, 0x63,
	0x65, 0x22, 0x41, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x84, 0x01, 0x0a, 0x0b, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x6e, 0x6d,
	0x75, 0x12, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x44, 0x61, 0x6e, 0x6d, 0x75, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x47, 0x69, 0x66, 0x74, 0x12, 0x10, 0x2e, 0x43, 0x6d, 0x64, 0x53, 0x65, 0x6e,
	0x64, 0x47, 0x69, 0x66, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x47, 0x75, 0x61, 0x72,
	0x64, 0x12, 0x0d, 0x2e, 0x43, 0x6d, 0x64, 0x47, 0x75, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x09, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x20, 0x5a, 0x1e, 0x2e,
	0x2f, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x47,
	0x6f, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_DanmuRequest_proto_rawDescOnce sync.Once
	file_DanmuRequest_proto_rawDescData = file_DanmuRequest_proto_rawDesc
)

func file_DanmuRequest_proto_rawDescGZIP() []byte {
	file_DanmuRequest_proto_rawDescOnce.Do(func() {
		file_DanmuRequest_proto_rawDescData = protoimpl.X.CompressGZIP(file_DanmuRequest_proto_rawDescData)
	})
	return file_DanmuRequest_proto_rawDescData
}

var file_DanmuRequest_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_DanmuRequest_proto_goTypes = []interface{}{
	(*CmdDanmuData)(nil),        // 0: CmdDanmuData
	(*CmdSendGiftData)(nil),     // 1: CmdSendGiftData
	(*AnchorInfo)(nil),          // 2: AnchorInfo
	(*ComboInfo)(nil),           // 3: ComboInfo
	(*CmdSuperChatData)(nil),    // 4: CmdSuperChatData
	(*CmdSuperChatDelData)(nil), // 5: CmdSuperChatDelData
	(*CmdGuardData)(nil),        // 6: CmdGuardData
	(*UserInfo)(nil),            // 7: UserInfo
	(*Response)(nil),            // 8: Response
}
var file_DanmuRequest_proto_depIdxs = []int32{
	2, // 0: CmdSendGiftData.anchor_info:type_name -> AnchorInfo
	3, // 1: CmdSendGiftData.combo_info:type_name -> ComboInfo
	7, // 2: CmdGuardData.user_info:type_name -> UserInfo
	0, // 3: DanmuServer.SendDanmu:input_type -> CmdDanmuData
	1, // 4: DanmuServer.SendGift:input_type -> CmdSendGiftData
	6, // 5: DanmuServer.SendGuard:input_type -> CmdGuardData
	8, // 6: DanmuServer.SendDanmu:output_type -> Response
	8, // 7: DanmuServer.SendGift:output_type -> Response
	8, // 8: DanmuServer.SendGuard:output_type -> Response
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_DanmuRequest_proto_init() }
func file_DanmuRequest_proto_init() {
	if File_DanmuRequest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_DanmuRequest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdDanmuData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdSendGiftData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComboInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdSuperChatData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdSuperChatDelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CmdGuardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_DanmuRequest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_DanmuRequest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_DanmuRequest_proto_goTypes,
		DependencyIndexes: file_DanmuRequest_proto_depIdxs,
		MessageInfos:      file_DanmuRequest_proto_msgTypes,
	}.Build()
	File_DanmuRequest_proto = out.File
	file_DanmuRequest_proto_rawDesc = nil
	file_DanmuRequest_proto_goTypes = nil
	file_DanmuRequest_proto_depIdxs = nil
}
