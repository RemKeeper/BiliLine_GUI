// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: DanmuRequest.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DanmuServerClient is the client API for DanmuServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DanmuServerClient interface {
	// 传递弹幕数据
	SendDanmu(ctx context.Context, in *CmdDanmuData, opts ...grpc.CallOption) (*Response, error)
	// 传递礼物数据
	SendGift(ctx context.Context, in *CmdSendGiftData, opts ...grpc.CallOption) (*Response, error)
	// 传递付费大航海数据
	SendGuard(ctx context.Context, in *CmdGuardData, opts ...grpc.CallOption) (*Response, error)
}

type danmuServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDanmuServerClient(cc grpc.ClientConnInterface) DanmuServerClient {
	return &danmuServerClient{cc}
}

func (c *danmuServerClient) SendDanmu(ctx context.Context, in *CmdDanmuData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DanmuServer/SendDanmu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *danmuServerClient) SendGift(ctx context.Context, in *CmdSendGiftData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DanmuServer/SendGift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *danmuServerClient) SendGuard(ctx context.Context, in *CmdGuardData, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/DanmuServer/SendGuard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DanmuServerServer is the server API for DanmuServer service.
// All implementations must embed UnimplementedDanmuServerServer
// for forward compatibility
type DanmuServerServer interface {
	// 传递弹幕数据
	SendDanmu(context.Context, *CmdDanmuData) (*Response, error)
	// 传递礼物数据
	SendGift(context.Context, *CmdSendGiftData) (*Response, error)
	// 传递付费大航海数据
	SendGuard(context.Context, *CmdGuardData) (*Response, error)
	mustEmbedUnimplementedDanmuServerServer()
}

// UnimplementedDanmuServerServer must be embedded to have forward compatible implementations.
type UnimplementedDanmuServerServer struct {
}

func (UnimplementedDanmuServerServer) SendDanmu(context.Context, *CmdDanmuData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDanmu not implemented")
}
func (UnimplementedDanmuServerServer) SendGift(context.Context, *CmdSendGiftData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGift not implemented")
}
func (UnimplementedDanmuServerServer) SendGuard(context.Context, *CmdGuardData) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGuard not implemented")
}
func (UnimplementedDanmuServerServer) mustEmbedUnimplementedDanmuServerServer() {}

// UnsafeDanmuServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DanmuServerServer will
// result in compilation errors.
type UnsafeDanmuServerServer interface {
	mustEmbedUnimplementedDanmuServerServer()
}

func RegisterDanmuServerServer(s grpc.ServiceRegistrar, srv DanmuServerServer) {
	s.RegisterService(&DanmuServer_ServiceDesc, srv)
}

func _DanmuServer_SendDanmu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdDanmuData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DanmuServerServer).SendDanmu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DanmuServer/SendDanmu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DanmuServerServer).SendDanmu(ctx, req.(*CmdDanmuData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DanmuServer_SendGift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdSendGiftData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DanmuServerServer).SendGift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DanmuServer/SendGift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DanmuServerServer).SendGift(ctx, req.(*CmdSendGiftData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DanmuServer_SendGuard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CmdGuardData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DanmuServerServer).SendGuard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DanmuServer/SendGuard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DanmuServerServer).SendGuard(ctx, req.(*CmdGuardData))
	}
	return interceptor(ctx, in, info, handler)
}

// DanmuServer_ServiceDesc is the grpc.ServiceDesc for DanmuServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DanmuServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DanmuServer",
	HandlerType: (*DanmuServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDanmu",
			Handler:    _DanmuServer_SendDanmu_Handler,
		},
		{
			MethodName: "SendGift",
			Handler:    _DanmuServer_SendGift_Handler,
		},
		{
			MethodName: "SendGuard",
			Handler:    _DanmuServer_SendGuard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "DanmuRequest.proto",
}
